version: "3.1"
services:

  redis:
    image: ahmadgfari/redis:hc-1.0
    networks:
      - frontend
    healthcheck:
      test: /healthchecks/hc.sh 
      interval: 5s 
    deploy:
      replicas: 1
      update_config:
        parallelism: 2
        delay: 10s
      restart_policy:
        condition: on-failure
  db:
    image: postgres:9.4
    secrets:
      - pguser
      - pgpass
    environment:
      POSTGRES_PASSWORD_FILE: /run/secrets/pgpass
      POSTGRES_USER_FILE: /run/secrets/pguser
    volumes:
      - db-data:/var/lib/postgresql/data
    networks:
      - backend
    deploy:
      placement:
        constraints: [node.role == manager]
  vote:
    image: dockersamples/examplevotingapp_vote:before
    ports:
      - 5000:80
    networks:
      - frontend
    depends_on:
      - redis
    deploy:
      replicas: 5
      update_config:
        parallelism: 2
      restart_policy:
        condition: on-failure
  result:
    image: ahmadgfari/votingapp-result:fix-db-passwd 
    ports:
      - 5001:80
    networks:
      - backend
    depends_on:
      - db
    deploy:
      replicas: 1
      update_config:
        parallelism: 2
        delay: 10s
      restart_policy:
        condition: on-failure

  worker:
    image: ahmadgfari/votingapp-worker:fix-db-passwd
    networks:
      - frontend
      - backend
    depends_on:
      - db
      - redis
    deploy:
      mode: replicated
      replicas: 1
      labels: [APP=VOTING]
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 3
        window: 120s
      placement:
        constraints: [node.role == manager]

  visualizer:
    image: dockersamples/visualizer:stable
    ports:
      - "8080:8080"
    stop_grace_period: 1m30s
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
    deploy:
      placement:
        constraints: [node.role == manager]

secrets:
  pguser:
    external: true
  pgpass:
    external: true
networks:
  frontend:
  backend:

volumes:
  db-data:
